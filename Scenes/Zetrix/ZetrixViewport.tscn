[gd_scene load_steps=6 format=2]

[ext_resource path="res://default_env.tres" type="Environment" id=1]
[ext_resource path="res://addons/godot-openvr/scenes/ovr_controller.tscn" type="PackedScene" id=2]
[ext_resource path="res://Scenes/Zetrix/PortScreen.tscn" type="PackedScene" id=3]

[sub_resource type="World" id=1]
fallback_environment = ExtResource( 1 )

[sub_resource type="GDScript" id=2]
script/source = "extends ARVRController

signal controller_activated(controller)

var ovr_render_model
var components = Array()
var ws = 0

func _ready():
	# instance our render model object
	ovr_render_model = preload(\"res://addons/godot-openvr/OpenVRRenderModel.gdns\").new()
	
	# hide to begin with
	visible = false

func apply_world_scale():
	var new_ws = ARVRServer.world_scale
	if (ws != new_ws):
		ws = new_ws
		$Controller_mesh.scale = Vector3(ws, ws, ws)

func load_controller_mesh(controller_name):
	if ovr_render_model.load_model(controller_name.substr(0, controller_name.length()-2)):
		return ovr_render_model
	
	if ovr_render_model.load_model(\"generic_controller\"):
		return ovr_render_model
	
	return Mesh.new()

func _process(delta):
	if !get_is_active():
		visible = false
		return
	
	# always set our world scale, user may end up changing this
	apply_world_scale()
	
	if visible:
		return
	
	# became active? lets handle it...
	var controller_name = get_controller_name()
	print(\"Controller \" + controller_name + \" became active\")
			
	# attempt to load a mesh for this
	$Controller_mesh.mesh = load_controller_mesh(controller_name)
			
	# make it visible
	visible = true
	emit_signal(\"controller_activated\", self)
"

[node name="ZetrixViewport" type="Viewport"]
arvr = true
size = Vector2( 1920, 1080 )
own_world = true
world = SubResource( 1 )
hdr = false
render_target_v_flip = true

[node name="ARVROrigin" type="ARVROrigin" parent="."]

[node name="ARVRCamera" type="ARVRCamera" parent="ARVROrigin"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 28 )

[node name="OVRController" parent="ARVROrigin" instance=ExtResource( 2 )]
script = SubResource( 2 )

[node name="PortScreen" parent="." instance=ExtResource( 3 )]
