[gd_scene load_steps=9 format=2]

[sub_resource type="PlaneMesh" id=2]
size = Vector2( 20, 20 )

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode unshaded;

uniform sampler2D refl_tx;

void fragment() {
	ALBEDO = texture(refl_tx, vec2(1.0 - SCREEN_UV.x, SCREEN_UV.y)).rgb;
}"

[sub_resource type="ViewportTexture" id=3]
viewport_path = NodePath("/root/EditorNode/@@5/@@6/@@14/@@16/@@20/@@24/@@25/@@26/@@42/@@43/@@52/@@53/@@5085/@@4947/@@4948/@@4949/@@4950/@@4951/Mirror Instance/View")

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/refl_tx = SubResource( 3 )

[sub_resource type="GDScript" id=5]
script/source = "tool
extends MeshInstance
onready var dummy_cam = $DummyCam
onready var mirror_cam = $View/Camera
var a = {}	#dictionary to remember Meshinstances' cull masks
export(int, 1, 20, 1) var IgnoreLayer = 2
#For Diagnostics:=========================================================================================================================================================================================================================================
#var BDY
#var Clmsk
#=========================================================================================================================================================================================================================================================


func _ready():
#	print(find_node(\"Camera\").get(\"cull_mask\"))
	add_to_group(\"mirrors\")	
	get(\"material/0\").get(\"shader_param/refl_tx\").set(\"viewport_path\",find_node(\"View\").get_path())			#sets the viewport_path to the right viewport for every instance of this scene ,Mi2's child(0)='View'
	$View.size = Vector2(2000,1000)			#the screen display size (from project settings)
											# must have the same width to height ratio (w=2h) as the settings here: 
	#$View.size = Vector2(ProjectSettings.get_setting(\"display/window/size/width\"), ProjectSettings.get_setting(\"display/window/size/height\"))
	get_node(\"View/Camera\").set(\"cull_mask\",1048575)#when all the camera's layer bits are turned on, the cull mask value is 1048575:  2^0 + 2^1 + 2^2 +...+2^19=1048575
	get_node(\"View/Camera\").set_cull_mask_bit(IgnoreLayer-1,false)		#while every layer is on this turns the chosen layer off
#For Diagnostics:=========================================================================================================================================================================================================================================
#	Clmsk=(log(1048575-get_node(\"View/Camera\").get(\"cull_mask\"))/log(2)+1)		#The cameras' cull mask layer (clmsk) = log2(1048575-Cull_mask_Value)+1
#=========================================================================================================================================================================================================================================================
	
	
	
#The player's camera node calls this function to update the mirror-cameras position
#shout out to Miziziziz who came up with this: https://www.youtube.com/watch?v=xXUVP6sN-tQ
func update_cam(main_cam_transform):
	scale.y *= -1
	dummy_cam.global_transform = main_cam_transform
	scale.y *= -1
	mirror_cam.global_transform = dummy_cam.global_transform
	mirror_cam.global_transform.basis.x *= -1


#recursively goes through a PhysicsBody node's branch to remember MeshInstances' layer mask 
#as it replaces it with the layer mask that the mirror's camera ignores
func _remember_MeshInstances(N):
	if(N != null):
#For Diagnostics:=========================================================================================================================================================================================================================================
#		print(N.name)
#==========================================================================================================================================================================================================================================================
		if((N.is_class(\"MeshInstance\"))&&(!a.has(N))):		#it checks if a MeshInstance it finds in the entering body is not yet added in the dictionary
#For Diagnostics:==========================================================================================================================================================================================================================================
#			print(\"\\n\",\"Before Entering, \\\"\",N.name,\"\\\", from node: \\\"\",BDY,\"\\\", had a layer mask value of: \",N.get_layer_mask())		#shows the meshInstance's name, which physicsBody it belongs to and it's CullMask value before entering the HideArea
#==========================================================================================================================================================================================================================================================
			a[N]=N.get_layer_mask()			#Stores MeshInstances in dictionary a
			N.set_layer_mask(0)		#Sets layer Mask bits to be all false except for the chosen layer
			N.set_layer_mask_bit(IgnoreLayer-1,true)	#the layer mask bits are just 1 less than the actual layers
#For Diagnostics:==========================================================================================================================================================================================================================================
#			print(\"\\n\",\"While Inside, \\\"\",N.name,\"\\\", from node: \\\"\",BDY,\"\\\", is set to appear only in layer: \",(log(N.get_layer_mask())/log(2)+1))			#shows the meshInstance's name, which physicsBody it belongs to and it's new CullMask value
#			print(\"This Mirror's cull mask is set to ignore layer: \",Clmsk)		# mirrors ignored cull mask layer
#			if((N.get_layer_mask()+get_node(\"View/Camera\").get(\"cull_mask\")==1048575)):		#the camera's layers are all ON except for the chosen layer to be ignored, the mesh's layers are all OFF except for the chosen layer so it could get ignored
#				print(\"The mirror is correctly ignoring this body when it passed behind it\")#if they were missaligned in any way
#			else:
#				print(\"I don't know what but something definitely went wrong\")
#==========================================================================================================================================================================================================================================================
		if(N.get_child_count()!=0):		#checks if the node still has children that the code has to sift thru
			for i in N.get_child_count():
				_remember_MeshInstances(N.get_child(i))		#recursion
#For Diagnostics:==========================================================================================================================================================================================================================================
#		else:							#shows up at the leaf(end) nodes
#			print(\"=================\")
#==========================================================================================================================================================================================================================================================



#Goes thru the exiting body's stuff and restores each MeshInstancs' original layer mask
func _restore_Mesh_mask(N):
	if(N != null):
#For Diagnostics:==========================================================================================================================================================================================================================================
#		print(N.name)
#==========================================================================================================================================================================================================================================================
		if((N.is_class(\"MeshInstance\"))&&(a.has(N))):		#checks if the MeshInstance has a saved layer mask in the dictionary
#For Diagnostics:==========================================================================================================================================================================================================================================
#			print(\"\\n\",\"Before Exiting, \\\"\",N.name,\"\\\", from node: \\\"\",BDY,\"\\\", had a layer mask value of: \",N.get_layer_mask())		#shows the meshInstance's name, which physicsBody it belongs to and it's CullMask value before it exits the HideArea
#==========================================================================================================================================================================================================================================================
			N.set_layer_mask(a.get(N))		#If it does it checks out of the HideArea with it
#For Diagnostics:==========================================================================================================================================================================================================================================
#			print(\"\\n\",\"After Exiting, \\\"\",N.name,\"\\\", from node: \\\"\",BDY,\"\\\", has a layer mask value of: \",N.get_layer_mask())		#shows the meshInstance's name, which physicsBody it belongs to and it's CullMask value after it exits the HideArea
#==========================================================================================================================================================================================================================================================
			a.erase(N)		#the saved layer mask is then erased from the dictionary
		if(N.get_child_count()!=0):		#checks if the node still has children that the code has to go thru
			for i in N.get_child_count():
				_restore_Mesh_mask(N.get_child(i))		#recursion



#Sets the PhysicsBody to a layer mask that the mirror's camera ignores
func _on_HideArea_body_entered(body):
#For Diagnostics:==========================================================================================================================================================================================================================================
#	BDY=body.name			#saves the PhysicsBody being refered to, as the parent node
#==========================================================================================================================================================================================================================================================
	_remember_MeshInstances(body)
#For Diagnostics:==========================================================================================================================================================================================================================================
#	print(\"\\nNodes currently in dictionary 'a':\\n\",a.keys())			#printsout the MeshInstances that the dictionary remembers at the moment
#	print(\"\\nTheir Cull Mask Values:\\n\",a.values())		#printsout the Cull Mask values of said MeshInstances
#==========================================================================================================================================================================================================================================================



#puts the original cullmask value back after body exits the hide area
func _on_HideArea_body_exited(body):
#For Diagnostics:==========================================================================================================================================================================================================================================
#	BDY=body.name			#saves the PhysicsBody being refered to, as the parent node
#==========================================================================================================================================================================================================================================================
	_restore_Mesh_mask(body)
#For Diagnostics:==========================================================================================================================================================================================================================================
#	print(\"\\nNodes currently in dictionary 'a':\\n\",a.keys())			#printsout the MeshInstances that the dictionary remembers at the moment
#	print(\"\\nTheir Cull Mask Values:\\n\",a.values())		#printsout the Cull Mask values of said MeshInstances
#==========================================================================================================================================================================================================================================================



\"\"\"
setting up:
	1. use the code provided below for the player camera
	2. use the code provided  below for the shader
	3. drop this .tscn file into your main scene with your player model
	4. make sure to set the project display window size to have a width 2xlonger than its height
	5. set each mirror you place with a different \"IgnoreLayer\" value in the inspector
	6. resize the \"HideArea\" node when you want to resize the mirror
	7. have fun
\"\"\"


\"\"\"
slap this on y'r SHADER CODE:
	
	shader_type spatial;
render_mode unshaded;

uniform sampler2D refl_tx;

void fragment() {
	ALBEDO = texture(refl_tx, vec2(1.0 - SCREEN_UV.x, SCREEN_UV.y)).rgb;
}


\"\"\"


\"\"\"
slap this on your face (PLAYER CAMERA):
	
	extends Camera

func _process(delta):
	get_tree().call_group(\"mirrors\",\"update_cam\",global_transform)

\"\"\"


\"\"\"
When in use:
	+if your using more than one mirror in a single scene you need to set each one with a different 'Ignore Layer' value
	
		unless you're cool with looking at a mirror seeing a bunch of stuff just dissapearing behind another mirror
		The key to this working right is to have the mirror's camera see stuff infront of the mirror and ignore stuff behind it
		
		picture this:
			you set up a huge mirror at the end of a hallway
			then a body mirror in a room right infront of the hallway mirror
			they're both set to ignore layer 2
			you decided to put the body mirror right next the door facing away from the hallway
			(puting the HideaArea right in the hallway to ignore anything that passes behind the body mirror)
			(...right in the hallway mirror's line of sight)
			so each time you passes the body mirror's 'HideArea' all your player model's MeshInstances are set to only appear in layer 2
			effectively makin you invisible to the body mirror... and the hallway mirror too because it's set to ignore layer 2 as well
			
			by having a different 'Ignore Layer' value you can be invisible to one mirror and not the other
			
		
	+You can change what layer the mirror ignores in the inspector under ScriptVariable (MirrorInstance > Ignore Layer)
		The mirror uses a layer mask (default:layer 2) to hide anything that moves behind it.
		Remember to save before every time you replay the scene for it to take effect.
		
	+You might want to check your objects' layer settings if their reflections don't show up
		Be aware that if you set it to ignore a layer,
		it will ignore everything that only exists in that single layer
		even if it's not behind the mirror
		
	+Make sure to set MeshInstances that you place behind it by hand to be true at the layer you set the mirror to ignore
		(and false at every other layer)
	
	+You need all your collisionShapes to be NOT 'Disabled' to trigger area collision
		Moving PhysicsBodies must trigger the 'HideArea' (the back of the mirror) when entering and exiting.
		The mirror SAVES the MeshInstances' layer mask of the body as it enters the HideArea in a dictionary.
		Whenever it leaves it checks out with its original layer mask, saved in the dictionary.
		
	+It might be hard to find the mirror if it's perfectly reflective (as it should be)
		You can change this by disabling the 'keep_3d_linear' property at the 'View' node.
		
	+It maybe over bearing if complex bodies, that have way too many children, were to walk behind it
		The code's designed to recursively check for MeshInstances in a body.
		The more children the body has the more branches the code has to go thru
		even if the body hasn't any MeshInstances at all
		so be careful??
		
	+if you change your player-camera's render distance you also need to resize the HideArea
		say you were right infront of the mirror looking at it
		and there was this hallway right behind it
		the HideArea box would hide everything that has a CollisionShape existing inside it
		that includes the walls and evrything else in the hallway
		but then you had a tree further back OUTSIDE the hallway(i.e. outside the HideArea)
		you take a few step back away from the mirror and all of the sudden a tree comes into view out of nowhere
		
		that's why you have to change the HideArea size to hide everything behind it as far as the player-camera can see
\"\"\"



\"\"\"
For Debugging (or you know, if you want to know how it works... only if you feel like it tho...its not like I worked hard on this just to give it away for free or anything...*kicks tin can):

	-Observing Mirror Camera Orientation:
		There's a MeshInstance called 'This should be Invisible' as the mirror camera's child node
		it basically just lets you see where the camera is actually at in the scene
		just toggle its visibility (The icon that looks like an eye right beside it) if you want to see it
		
		
	-Observing The Recursive Node Search At Work:
		Basically how the code Sifts thru what a PhysicsBody has when it enters the HideArea
		I'm using the Depth-First Search method cause it saves a lot of memory space (it says it on the box)

		Go to the following functions and uncomment the indicated Diagnostic lines:
			-+func _remember_MeshInstances(N):
				print(N.name)
				else:
				print(\"=================\")
				
		remember to recomment the lines when you're done
		
		
	-Observing The HideArea At Work:
		Uncomment the global variable declaration: 'BDY' at the top
		Go to the following functions and uncomment the indicated Diagnostic lines:

			-+func _remember_MeshInstances(N):
				print(\"\\n\",\"Before Entering, \",N.name,\", from node: \",BDY,\", had a layer mask value of: \",N.get_layer_mask())
				print(\"\\n\",\"While Inside, \",N.name,\", from node: \",BDY,\", has a layer mask value of: \",N.get_layer_mask())

			-+func _restore_Mesh_mask(N):
				print(\"\\n\",\"Before Exiting, \",N.name,\", from node: \",BDY,\", had a layer mask value of: \",N.get_layer_mask())
				print(\"\\n\",\"After Exiting, \",N.name,\", from node: \",BDY,\", has a layer mask value of: \",N.get_layer_mask())
				
			-+func _on_HideArea_body_entered(body):
				BDY=body.name
				print(\"\\nNodes currently in dictionary 'a':\\n\",a.keys())
				print(\"\\nTheir Cull Mask Values:\\n\",a.values())
				
			-+func _on_HideArea_body_exited(body):
				BDY=body.name
				print(\"\\nNodes currently in dictionary 'a':\\n\",a.keys())
				print(\"\\nTheir Cull Mask Values:\\n\",a.values())
				
		Entries are printed on the Output each time a PhysicsBody enters the HideArea
		remember to recomment the lines when you're done
		
	-Observe the mirror camera's cull layer value and the layer the HideArea sets the PhysicsBodies to appear
		Uncomment the global variable declaration: 'BDY'& 'Clmsk' at the top
		Go to the following functions and uncomment the indicated Diagnostic lines:
			-+func_ready()
				Clmsk=(log(1048575-get_node(\"View/Camera\").get(\"cull_mask\"))/log(2)+1)
				
			-+func _remember_MeshInstances(N):
				print(\"\\n\",\"While Inside, \\\"\",N.name,\"\\\", from node: \\\"\",BDY,\"\\\", is set to appear only in layer: \",(log(N.get_layer_mask())/log(2)+1))
				print(\"This Mirror's cull mask is set to ignore layer: \",Clmsk)
				if((N.get_layer_mask()+get_node(\"View/Camera\").get(\"cull_mask\")==1048575)):
					print(\"The mirror is correctly ignoring this body when it passed behind it\")
				else:
					print(\"I don't know what but something definitely went wrong\")
					
			-+func _on_HideArea_body_entered(body):
					BDY=body.name
				
		Entries are printed on the Output each time a PhysicsBody enters the HideArea
		remember to recomment the lines when you're done
\"\"\"



\"\"\"
Disclaimers and things to improve upon:
	+ There has got to be a better way to do this...I had to do all of this just for an asset...
		I mean I couldn't find any water shader to use as a reflective surface
		the reflection probe is a no go for dynamic bodies
	
	+ I havn't implemented recursive reflections... so, no infinite mirrors yet :(
		(but it be dope if someone can help with that...)
		
	+ The asset changes the layer state of any MeshInstance that 
		belongs to a PhysicsBody that enters the 'HideArea' behind the mirror
		don't worry, the mirror puts it right back when it exits the trigger area
		but as long as that PhysicsBody is in there 
		its layer mask is set to the cull mask layer that the mirror's Camera is set to ignore
	
	+ the code's designed to recursively check for MeshInstances in a body
		the more children the body has the more branches the code has to go thru 
		even if the body hasn't any MeshInstances
		so... it might cause lag when a PhysicsBody with a LOT of children move behind it
	
	+ I have no idea how to test this performance wise, I was just going for 
		the goal of making this portable and a few other things
		
	+ the code could use some improvements, some of the things I used are really primitive
		and maybe optimization thru c++ would be nice
	
	+ a few things may go wrong, cause amanoob and i only did this within a week :)
		(so please have mercy)
\"\"\"



\"\"\"
Things to remember in recreating this from scratch:
	
I'v set the ff to 'Make Unique' at the main root node when I added the necessary materials in:
		MeshInstance/mesh
		MeshInstance/material/0
		MeshInstance/material/0/shader
		MeshInstance/material/0/shader_param/refl_tx
	
add a 'New ShaderMaterial' to MeshInstance/material/0

add a '.shader' file in MeshInstance/material/0/shader with the shader code ('Mshader.shader') that came with this code
	
	this way the 'shader_param/refl_tx' property appears just right below it so you can add a 'New ViewportTexture'
	(you might be asked to turn local_to_scene 'on' (MeshInstance/material/0/resource_local_to_scene)
	before you can actually add a new one)
	
	(in adding the 'New ViewportTexture' you might have to pick a viewport node initially 
	but this script should be able to find and set the right one just fine

For the Viewport node set the 'shadow_atlas_size' to atleast 1 so the mirror can render shadows

set the Camera node propery: 'current' on

and the Position nodes name has to match what the 'var dummy_cam' is refering to in the script: 'DummyCam'

The mirror's Camera nodes are set to ignore Cull Mask layer 2
	to hide anybody(PhysicsBodies) that moves behind the mirror
	so it be best to not use that layer
	if you really want to use that layer for something else
	there should be a property called 'Layer Bit' if you look at the 'Mirror Instance' in the inspector
		this makes the mirror's Camera node ignore the layer you choose at run time
		and it also sets the HideArea node too
		
The 'HideArea' node has all its Collision Mask enabled by default
	This lets the Mirror detect collisions regardless of the body's set collision layer
	so screw with it at your own risk
\"\"\"


\"\"\"
	Hi! this is the first asset that I created in Godot, actually this is the only thing 
I'v made in Godot so far...

to be honest this is my first time touching a game engine ever so bear with me :).

	I liked the idea of mirrors but I only found a few  people who talked about the subject within
the Godot community. I've noticed from the tutorials I'v found that they had to build mirrors 
within the main world. I tried finding a mirror asset but nothing ever came up so, I decided to try
 and make one as my intro to the world of game developing.

	I also noticed that the dominant technique in building mirrors in godot couldn't stop things
 moving behind it from showing up in the mirror so I said screw it Imma carry that too no matter how
awkward I decide to do it.

	soooo, here it is, a self contained, very portable, and cull layer friendly-ish mirror asset 
that doesn't show objects from behind... that also renders shadows :D

	Thank you for actually taking the time to read all of that
	
sincerely, PHO-BOSS (KIM NICKHO A. OBORDO)
\"\"\"






\"\"\"
Shameless Plug:
	check out my YouTube channel...: 
		https://www.youtube.com/channel/UCmdUkIr-zCxO9CvOLxeSzlg?view_as=subscriber
	
\"\"\"
"

[sub_resource type="BoxShape" id=6]
extents = Vector3( 20, 10, 15 )

[sub_resource type="CubeMesh" id=7]

[sub_resource type="SpatialMaterial" id=8]
albedo_color = Color( 0.639216, 0.0352941, 0.945098, 1 )

[node name="Mirror Instance" type="MeshInstance"]
transform = Transform( -4.37114e-08, 1, -4.37114e-08, 0, -4.37114e-08, -1, -1, -4.37114e-08, 1.91069e-15, -1, 10, 0 )
mesh = SubResource( 2 )
material/0 = SubResource( 4 )
script = SubResource( 5 )
IgnoreLayer = 2

[node name="HideArea" type="Area" parent="."]
transform = Transform( 1, 0, 0, 0, 1, -8.35189e-23, 0, -8.35188e-23, 1, 0, -11.4, 0 )
collision_mask = 1048575

[node name="CollisionShape" type="CollisionShape" parent="HideArea"]
transform = Transform( 1, 0, 0, 0, 1, -8.35187e-23, 0, -8.35187e-23, 1, 0, -1.90735e-06, 0 )
shape = SubResource( 6 )

[node name="View" type="Viewport" parent="."]
size = Vector2( 2000, 1000 )
keep_3d_linear = true
shadow_atlas_size = 1

[node name="Camera" type="Camera" parent="View"]
transform = Transform( -4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, -9.45605, 12.6183, -31.334 )
cull_mask = 1048573
current = true

[node name="This should be Invisible" type="MeshInstance" parent="View/Camera"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.885156, 0 )
visible = false
mesh = SubResource( 7 )
material/0 = SubResource( 8 )

[node name="DummyCam" type="Position3D" parent="."]
transform = Transform( 1, 0, 0, 0, 1, -8.35189e-23, 0, -8.35188e-23, 1, 0, 0, 0 )
[connection signal="body_entered" from="HideArea" to="." method="_on_HideArea_body_entered"]
[connection signal="body_exited" from="HideArea" to="." method="_on_HideArea_body_exited"]
