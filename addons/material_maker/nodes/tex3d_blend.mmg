{
	"name": "tex3d_blend",
	"node_position": {
		"x": 0,
		"y": 0
	},
	"parameters": {
		"amount": 0,
		"blend_type": 8
	},
	"shader_model": {
		"code": "",
		"global": "vec3 blend3d_normal(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1 + (1.0-opacity)*c2;\n}\n\nvec3 blend3d_multiply(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1*c2 + (1.0-opacity)*c2;\n}\n\nvec3 blend3d_screen(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*(1.0-(1.0-c1)*(1.0-c2)) + (1.0-opacity)*c2;\n}\n\nfloat blend3d_overlay_f(float c1, float c2) {\n\treturn (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));\n}\n\nvec3 blend3d_overlay(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend3d_overlay_f(c1.x, c2.x), blend3d_overlay_f(c1.y, c2.y), blend3d_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blend3d_hard_light(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*0.5*(c1*c2+blend3d_overlay(c1, c2, 1.0)) + (1.0-opacity)*c2;\n}\n\nfloat blend3d_soft_light_f(float c1, float c2) {\n\treturn (c2 < 0.5) ? (2.0*c1*c2+c1*c1*(1.0-2.0*c2)) : 2.0*c1*(1.0-c2)+sqrt(c1)*(2.0*c2-1.0);\n}\n\nvec3 blend3d_soft_light(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend3d_soft_light_f(c1.x, c2.x), blend3d_soft_light_f(c1.y, c2.y), blend3d_soft_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blend3d_burn_f(float c1, float c2) {\n\treturn (c1==0.0)?c1:max((1.0-((1.0-c2)/c1)),0.0);\n}\n\nvec3 blend3d_burn(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend3d_burn_f(c1.x, c2.x), blend3d_burn_f(c1.y, c2.y), blend3d_burn_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blend3d_dodge_f(float c1, float c2) {\n\treturn (c1==1.0)?c1:min(c2/(1.0-c1),1.0);\n}\n\nvec3 blend3d_dodge(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend3d_dodge_f(c1.x, c2.x), blend3d_dodge_f(c1.y, c2.y), blend3d_dodge_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blend3d_lighten(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*max(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blend3d_darken(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*min(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blend3d_difference(vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*clamp(c2-c1, vec3(0.0), vec3(1.0)) + (1.0-opacity)*c2;\n}\n",
		"inputs": [
			{
				"default": "vec3($uv.x, 1.0, 1.0)",
				"label": "Source1",
				"name": "s1",
				"type": "tex3d"
			},
			{
				"default": "vec3(1.0, $uv.y, 1.0)",
				"label": "Source2",
				"name": "s2",
				"type": "tex3d"
			},
			{
				"default": "vec3(1.0)",
				"label": "Opacity",
				"name": "a",
				"type": "tex3d"
			}
		],
		"instance": "",
		"name": "TEX3D Blend",
		"outputs": [
			{
				"tex3d": "blend3d_$blend_type($s1($uv).rgb, $s2($uv).rgb, $amount*dot($a($uv), vec3(1.0))/3.0)",
				"type": "tex3d"
			}
		],
		"parameters": [
			{
				"default": 0,
				"label": "",
				"name": "blend_type",
				"type": "enum",
				"values": [
					{
						"name": "Normal",
						"value": "normal"
					},
					{
						"name": "Multiply",
						"value": "multiply"
					},
					{
						"name": "Screen",
						"value": "screen"
					},
					{
						"name": "Overlay",
						"value": "overlay"
					},
					{
						"name": "Hard Light",
						"value": "hard_light"
					},
					{
						"name": "Soft Light",
						"value": "soft_light"
					},
					{
						"name": "Burn",
						"value": "burn"
					},
					{
						"name": "Dodge",
						"value": "dodge"
					},
					{
						"name": "Lighten",
						"value": "lighten"
					},
					{
						"name": "Darken",
						"value": "darken"
					},
					{
						"name": "Difference",
						"value": "difference"
					}
				]
			},
			{
				"control": "None",
				"default": 0.5,
				"label": "3:",
				"max": 1,
				"min": 0,
				"name": "amount",
				"step": 0,
				"type": "float"
			}
		]
	},
	"type": "shader"
}