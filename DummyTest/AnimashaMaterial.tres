[gd_resource type="ShaderMaterial" load_steps=16 format=2]

[ext_resource path="res://Sprites/ConsoleHover.png" type="Texture" id=1]
[ext_resource path="res://Sprites/ConsoleHoverEmpty.png" type="Texture" id=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=2]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=3]
output_port_for_preview = 0
uniform_name = "NextBgDrop"

[sub_resource type="VisualShaderNodeTextureUniform" id=4]
output_port_for_preview = 0
uniform_name = "TexturePrev"

[sub_resource type="VisualShaderNodeTextureUniform" id=5]
output_port_for_preview = 0
uniform_name = "TextureNext"

[sub_resource type="VisualShaderNodeTexture" id=6]

[sub_resource type="VisualShaderNodeTexture" id=7]

[sub_resource type="VisualShaderNodeVectorOp" id=8]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorOp" id=9]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=10]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=11]
output_port_for_preview = 0
uniform_name = "PrevBgDrop"

[sub_resource type="VisualShaderNodeScalarOp" id=12]
operator = 2

[sub_resource type="VisualShader" id=13]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_15;
uniform vec4 PrevBgDrop : hint_color;
uniform sampler2D tex_frg_16;
uniform vec4 NextBgDrop : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// Texture:15
	vec4 tex_frg_15_read = texture(tex_frg_15, UV.xy);
	vec3 n_out15p0 = tex_frg_15_read.rgb;
	float n_out15p1 = tex_frg_15_read.a;

// ColorUniform:8
	vec3 n_out8p0 = PrevBgDrop.rgb;
	float n_out8p1 = PrevBgDrop.a;

// VectorOp:6
	vec3 n_out6p0 = n_out15p0 * n_out8p0;

// Texture:16
	vec4 tex_frg_16_read = texture(tex_frg_16, UV.xy);
	vec3 n_out16p0 = tex_frg_16_read.rgb;
	float n_out16p1 = tex_frg_16_read.a;

// ColorUniform:12
	vec3 n_out12p0 = NextBgDrop.rgb;
	float n_out12p1 = NextBgDrop.a;

// VectorOp:7
	vec3 n_out7p0 = n_out16p0 * n_out12p0;

// VectorOp:5
	vec3 n_out5p0 = n_out6p0 + n_out7p0;

// Output:0
	COLOR.rgb = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1136, 239 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 620, 180 )
nodes/fragment/5/node = SubResource( 8 )
nodes/fragment/5/position = Vector2( 160, 400 )
nodes/fragment/6/node = SubResource( 9 )
nodes/fragment/6/position = Vector2( -100, 280 )
nodes/fragment/7/node = SubResource( 10 )
nodes/fragment/7/position = Vector2( -100, 600 )
nodes/fragment/8/node = SubResource( 11 )
nodes/fragment/8/position = Vector2( -480, 220 )
nodes/fragment/9/node = SubResource( 12 )
nodes/fragment/9/position = Vector2( -100, 140 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 160, 240 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -100, 460 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -480, 480 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -760, 200 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -760, 500 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -1020, 240 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( -1020, 500 )
nodes/fragment/connections = PoolIntArray( 6, 0, 5, 0, 7, 0, 5, 1, 8, 0, 6, 1, 8, 1, 9, 1, 9, 0, 10, 0, 11, 0, 10, 1, 12, 0, 7, 1, 12, 1, 11, 1, 15, 0, 6, 0, 15, 1, 9, 0, 16, 0, 7, 0, 16, 1, 11, 0, 5, 0, 0, 0 )

[resource]
shader = SubResource( 13 )
shader_param/PrevBgDrop = Color( 0, 0, 0, 0 )
shader_param/NextBgDrop = Color( 1, 1, 1, 1 )
shader_param/tex_frg_15 = ExtResource( 2 )
shader_param/tex_frg_16 = ExtResource( 1 )
